!function (a, b) { "object" == typeof module && module.exports ? module.exports = b(require("jquery")) : b(a.jQuery) }(this, function (a) { function c(b, c, d) { if (b = a(b), c = c || b.data("title"), c || (c = b.attr("title")), c) { var e = a('<div class="ssi-fadeOut ssi-fade ssi-tooltipText">' + c + "</div>").appendTo(d.$element); b.one("mouseleave", function () { e.remove() }); var f = -16; return b.hasClass("ssi-noPreviewSubMessage") && (f = 23), e.css({ top: b.position().top - e.height() + f, left: b.position().left - e.width() / 2 }).removeClass("ssi-fadeOut"), e } } var b = function (a, b) { this.options = b, this.$element = "", this.language = o[this.options.locale], this.uploadList = [], this.totalProgress = [], this.toUpload = [], this.imgNames = [], this.totalFilesLength = 0, this.successfulUpload = 0, this.aborted = 0, this.abortedWithError = 0, this.pending = 0, this.inProgress = 0, this.currentListLength = 0, this.init(a) }; b.prototype.init = function (b) { a(b).addClass("ssi-uploadInput").after(this.$element = a('<div class="ssi-uploader">')); var d = a('<span class="ssi-InputLabel"><button class="ssi-button success">' + this.language.chooseFiles + "</button></span>").append(b), e = a('<button id="ssi-uploadBtn" class="ssi-button success ssi-hidden" ><span class="ssi-btnIn">' + this.language.upload + '&nbsp;</span><div id="ssi-up_loading" class="ssi-btnIn"></div></button>'), f = a('<button id="ssi-clearBtn" class="ssi-hidden ssi-button info" >' + this.language.clear + "</button>"), g = a('<button id="ssi-abortBtn" class="ssi-button error ssi-cancelAll ssi-hidden" ><span class="inBtn">' + this.language.abort + " </span></button>"); this.$element.append(a('<div class="ssi-buttonWrapper">').append(d, g, e, f)); var h; if (this.options.preview) h = a('<div id="ssi-previewBox" class="ssi-uploadBox ssi-previewBox ' + (this.options.dropZone ? "ssi-dropZonePreview ssi-dropZone" : "") + '"><div id="ssi-info">' + (this.options.dropZone ? '<div id="ssi-DropZoneBack">' + this.language.drag + "</div>" : "") + '<div id="ssi-fileNumber" class="ssi-hidden">?</div></div></div>'), this.$element.append(h); else { this.$element.addClass("ssi-uploaderNP"); var i = a('<table id="ssi-fileList" class="ssi-fileList"></table>'), j = a('<span class="ssi-namePreview"></span>'), l = a('<div id="ssi-uploadFiles" class="ssi-tooltip ssi-uploadFiles ' + (this.options.dropZone ? "ssi-dropZone" : "") + '"><div id="ssi-uploadProgressNoPreview" class="ssi-uploadProgressNoPreview"></div></div>').append(j), m = a('<div class="ssi-uploadDetails"></div>').append(i); h = a('<div class="ssi-uploadBoxWrapper ssi-uploadBox"></div>').append(l, m), this.$element.prepend(h) } var n = this, o = d.find(".ssi-uploadInput"); d.find("button").click(function () { o.trigger("click") }), o.on("change", function () { n.toUploadFiles(this.files), o.val("") }), n.options.dropZone && (h.on("drop", function (a) { a.preventDefault(), h.removeClass("ssi-dragOver"); var b = a.originalEvent.dataTransfer.files; n.toUploadFiles(b) }), h.on("dragover", function (a) { return a.preventDefault(), h.addClass("ssi-dragOver"), !1 }), h.on("dragleave", function (a) { return a.preventDefault(), h.removeClass("ssi-dragOver"), !1 })), n.options.preview || l.click(function () { n.currentListLength > 1 && m.toggleClass("ssi-uploadBoxOpened") }), f.click(function () { n.clear() }), h.on("mouseenter", ".ssi-statusLabel", function (b) { var d = a(b.currentTarget), e = d.attr("data-status"); e && "" !== e && c(d, e, n) }), h.on("mouseenter", "#ssi-fileNumber", function (b) { var d = a(b.currentTarget), e = " " + n.language.pending + ": " + n.pending + " <br> " + n.language.completed + ": " + (n.successfulUpload + n.aborted + n.abortedWithError) + "<br> " + n.language.inProgress + ": " + n.inProgress; c(d, e, n) }), h.on("click", ".ssi-removeBtn", function (b) { var c = a(b.currentTarget), d = c.data("delete"); if (n.pending--, n.currentListLength--, n.pending < 1 && n.$element.find("#ssi-fileNumber").addClass("ssi-hidden"), 0 === n.pending && e.prop("disabled", !0), n.options.preview) c.parents("table.ssi-imgToUploadTable").remove(); else { var g = c.parents("tr.ssi-toUploadTr"); j.html(n.currentListLength + " files"), g.prev().remove(), g.remove(), 1 === n.currentListLength && k(n) } n.toUpload[d] = null, n.imgNames[d] = null, 0 === n.currentListLength && (n.options.dropZone || h.removeClass("ssi-uploadNoDropZone"), f.addClass("ssi-hidden"), e.addClass("ssi-hidden")) }), h.on("click", ".ssi-abortUpload", function (b) { var c = a(b.currentTarget), d = c.data("delete"); n.abort(d) }), e.click(function () { n.uploadFiles() }), g.click(function () { n.abortAll() }) }, b.prototype.abortAll = function () { for (var a = 0; a < this.uploadList.length; a++) "object" == typeof this.uploadList[a] && this.abort(a) }, b.prototype.toUploadFiles = function (b) { function w() { var a = c.totalFilesLength + c.pending; 0 === a && (c.options.preview && (c.options.dropZone || j.addClass("ssi-uploadNoDropZone")), g.removeClass("ssi-hidden"), h.removeClass("ssi-hidden")), h.prop("disabled", !0), c.toUpload[a] = s; var b = s.name, e = b.getExtension(); if (c.imgNames[a] = b, c.options.preview) { var l = function (c) { return '<table class="ssi-imgToUploadTable ssi-pending"><tr><td class="ssi-upImgTd">' + c + '</td></tr><tr><td><div id="ssi-uploadProgress' + a + '" class="ssi-hidden ssi-uploadProgress"></div></td></tr><tr><td><button data-delete="' + a + '" class=" ssi-button error ssi-removeBtn"><span class="trash10 trash"></span></button></td></tr><tr><td>' + m(b, e, 15) + "</td></tr></table>" }, n = s.type.split("/"); if ("image" == n[0]) { g.prop("disabled", !0), h.prop("disabled", !0); var o = new FileReader; o.onload = function () { f += l('<img class="ssi-imgToUpload" src=""/><i class="fa-spin fa fa-spinner fa-pulse"></i>'), k[a] = o.result, d++, p === d ? (c.$element.find("#ssi-fileNumber").removeClass("ssi-hidden"), j.append(f), setTimeout(function () { q(), g.prop("disabled", !1), h.prop("disabled", !1) }, 10), g.prop("disabled", !1), h.prop("disabled", !1), f = "", p = []) : p / 2 == Math.round(d) && (j.append(f), q(), f = "") }, o.readAsDataURL(s) } else k[a] = null, j.append(l('<div class="document-item" href="test.mov" filetype="' + e + '"><span class = "fileCorner"></span></div>')), d++ } else c.$element.find(".ssi-namePreview").html(0 === a ? m(b, e, 13) : c.currentListLength + 1 + " " + c.language.files), i.append('<tr class="ssi-space"><td></td></tr><tr class="ssi-toUploadTr ssi-pending"><td><div id="ssi-uploadProgress' + a + '" class="ssi-hidden ssi-uploadProgress ssi-uploadProgressNoPre"></div><span>' + m(b, e, 20) + '</span></td><td><a data-delete="' + a + '" class="ssi-button ssi-removeBtn  ssi-removeBtnNP"><span class="trash7 trash"></span></a></td></tr>'); var q = function () { for (var a = 0; a < k.length; a++) null !== k[a] && (j.find("#ssi-uploadProgress" + a).parents("table.ssi-imgToUploadTable").find(".ssi-imgToUpload").attr("src", k[a]).next().remove(), k[a] = null); k = [] } } if (!("number" == typeof this.options.maxNumberOfFiles && this.inProgress + this.pending >= this.options.maxNumberOfFiles)) { var e, c = this, d = 0, f = "", g = this.$element.find("#ssi-uploadBtn"), h = this.$element.find("#ssi-clearBtn"), i = this.$element.find("#ssi-fileList"), j = this.$element.find(".ssi-uploadBox"), k = []; 0 === this.inProgress && 0 === this.pending && this.clear(); var p, l = [], n = [], o = "", q = e = p = b.length; "number" == typeof this.options.maxNumberOfFiles && q > this.options.maxNumberOfFiles - (this.inProgress + this.pending) && (q = p = this.options.maxNumberOfFiles - (this.inProgress + this.pending)); for (var r = 0; r < q; r++) { var s = b[r], t = s.name.getExtension(); a.inArray(t, this.options.allowed) === -1 ? (e > q ? q++ : p--, a.inArray(t, l) === -1 && l.push(t)) : (s.size * Math.pow(10, -6)).toFixed(2) > this.options.maxFileSize ? (e > q ? q++ : p--, n.push(m(s.name, t, 15))) : a.inArray(s.name, this.imgNames) === -1 ? (g.prop("disabled", !1), w(s), this.pending++, this.currentListLength++) : e > q ? q++ : p-- } var u = l.length, v = n.length; u + v > 0 && (u > 0 && (o = this.language.extError.replaceText(l.toString().replace(/,/g, ", "))), v > 0 && (o += this.language.sizeError.replaceText(n.toString().replace(/,/g, ", "), this.options.maxFileSize + "mb")), this.options.errorHandler.method(o, this.options.errorHandler.error)) } }; var d = function (a) { var b = a.$element.find(".ssi-completed"); a.successfulUpload = 0, a.aborted = 0, a.abortedWithError = 0, a.options.preview || b.prev("tr").remove(), b.remove() }, e = function (a) { for (var b = a.$element.find(".ssi-pending"), c = a.imgNames.length, d = 0; d < c; d++) null === a.imgNames[d] && (a.toUpload.splice(d, 1), a.imgNames.splice(d, 1)); a.toUpload.splice(-a.pending, a.pending), a.imgNames.splice(-a.pending, a.pending), a.pending = 0, a.options.preview || b.prev("tr").remove(), b.remove() }; b.prototype.clear = function (a) { switch (a) { case "pending": e(this); break; case "completed": d(this); break; default: e(this), d(this) } var b = this.$element.find("#ssi-uploadBtn"), c = this.$element.find("#ssi-clearBtn"); this.currentListLength = j(this), 0 === this.inProgress && (this.totalProgress = []), 0 === this.currentListLength && (c.addClass("ssi-hidden"), b.addClass("ssi-hidden"), this.$element.find("#ssi-fileNumber").addClass("ssi-hidden"), this.totalFilesLength = 0, this.options.dropZone || this.$element.find(".ssi-uploadBox").removeClass("ssi-uploadNoDropZone")), c.prop("disabled", !0), b.prop("disabled", !0), this.options.preview || f(this) }; var f = function (a) { a.currentListLength > 1 ? a.$element.find(".ssi-namePreview").html(a.currentListLength + " files") : 1 === a.currentListLength ? k(a) : (a.$element.find(".ssi-uploadDetails").removeClass("ssi-uploadBoxOpened"), a.$element.find("#ssi-fileList").empty(), a.$element.find(".ssi-namePreview").empty()) }; b.prototype.uploadFiles = function () { function j(e, f) { var k = "table.ssi-imgToUploadTable"; d.options.preview || (k = "tr.ssi-toUploadTr"); var m = d.$element.find("#ssi-uploadProgress" + f); m.removeClass("ssi-hidden").parents(k).removeClass("ssi-pending"); var o = a.extend({}, { xhr: function () { var a = new window.XMLHttpRequest; return a.upload.addEventListener("progress", function (a) { if (a.lengthComputable) { var c = a.loaded / a.total * 100; m && m.css({ width: c + "%" }), d.totalProgress[f] = c; var e = n(d.totalProgress) / (d.inProgress + d.successfulUpload); d.options.preview || d.$element.find("#ssi-uploadProgressNoPreview").removeClass("ssi-hidden").css({ width: e + "%" }), b.find("#ssi-up_loading").html(Math.ceil(e) + "%") } }, !1), a }, async: !0, beforeSend: function (a) { if (d.uploadList[f] = a, b.find("#ssi-up_loading").html('<i class="fa fa-spinner fa-pulse"></i>'), "function" == typeof d.options.beforeEachUpload) try { var c = d.options.beforeEachUpload({ name: d.toUpload[f].name, type: d.toUpload[f].type, size: (d.toUpload[f].size / 1024).toFixed(2) }, a) } catch (a) { return void ("Error" == a.name ? d.abort(f, void 0, a.message) : d.options.ignoreCallbackErrors || (console.log("There is an error in beforeEachUpload callback. Filename:" + d.toUpload[f].name), console.log(a), d.abort(f, void 0, d.language.wentWrong))) } d.$element.find("input.ssi-uploadInput").trigger("beforeEachUpload.ssi-uploader"), 0 === a.status && "canceled" === a.statusText && ("undefined" == typeof c && (c = !1), d.abortedWithError++, d.abort(f, c)) }, type: "POST", data: e, cache: !1, contentType: !1, processData: !1, url: d.options.url, error: function (a, b) { if ("abort" !== b) { m.addClass("ssi-canceledProgressBar"); var e = d.language.error; if (d.abortedWithError++, d.totalProgress.splice(f, 1), d.options.preview || (e = '<span class="exclamation7"></span>'), g(d, f, "error", e, d.language.serverError), d.totalProgress[f] = "", d.inProgress--, c.prop("disabled", !1), "function" == typeof d.options.onEachUpload) try { d.options.onEachUpload({ uploadStatus: "error", name: d.toUpload[f].name, size: (d.toUpload[f].size / 1024).toFixed(2), type: d.toUpload[f].type }) } catch (a) { d.options.ignoreCallbackErrors || (console.log("There is an error in onEachUpload callback. File name:" + d.toUpload[f].name), console.log(a)) } h(d) && l(d), console.log(arguments), console.log(" Ajax error: " + b) } } }, d.options.ajaxOptions); for (a.ajax(o).done(function (b, e, i) { function r(a, b) { a ? (n = "success", j = d.language.success, o = "check", d.successfulUpload++) : (m.addClass("ssi-canceledProgressBar"), d.options.preview && (j = d.language.error), k = b, d.abortedWithError++) } var j, p, k = "", n = "error", o = "exclamation"; try { p = a.parseJSON(b) } catch (a) { p = b } if (d.options.responseValidation) { var q = d.options.responseValidation; "object" == typeof q.validationKey && "validationKey" == q.resultKey ? p.hasOwnProperty(q.validationKey.success) ? r(!0) : r(!1, p[q.validationKey.error]) : p[q.validationKey] == q.success ? r(!0) : r(!1, p[q.resultKey]) } else 200 == i.status ? r(!0) : r(!1, p); if (d.options.preview || (j = '<span class="' + o + '7"></span>'), g(d, f, n, j, k), "function" == typeof d.options.onEachUpload) try { d.options.onEachUpload({ uploadStatus: n, name: d.toUpload[f].name, size: (d.toUpload[f].size / 1024).toFixed(2), type: d.toUpload[f].type }) } catch (a) { console.log("There is an error in onEachUpload callback"), console.log(a) } d.$element.find("input.ssi-uploadInput").trigger("onEachUpload.ssi-uploader"), d.inProgress--, c.prop("disabled", !1), h(d) && l(d), d.uploadList[f] = "", d.toUpload[f] = "", d.imgNames[f] = "" }), i = f, i++; null === d.toUpload[i] || "" === d.toUpload[i];) i++; i < d.toUpload.length && (e = new FormData, a.each(d.options.data, function (a, b) { e.append(a, b) }), e.append("files[]", d.toUpload[i]), j(e, i)) } if (this.pending > 0) { if ("function" == typeof this.options.beforeUpload) try { this.options.beforeUpload() } catch (a) { if (!this.options.ignoreCallbackErrors) return console.log("There is an error in beforeUpload callback"), console.log(a) } this.$element.find("#ssi-abortBtn").removeClass("ssi-hidden"), this.$element.find(".ssi-removeBtn").addClass("ssi-abortUpload").removeClass("ssi-removeBtn").children("span").removeClass("trash7 trash10 trash").addClass(this.options.preview ? "ban7w" : "ban7"); var b = this.$element.find("#ssi-uploadBtn"), c = this.$element.find("#ssi-clearBtn"); b.prop("disabled", !0); var d = this, e = new FormData, i = this.totalFilesLength; for (0 === this.totalFilesLength || this.options.preview || f(this), this.inProgress += this.pending, this.totalFilesLength += this.pending, this.pending = 0, this.inProgress === this.currentListLength && c.prop("disabled", !0) ; null === d.toUpload[i] || "" === d.toUpload[i];) i++; e.append("files[]", d.toUpload[i]), a.each(this.options.data, function (a, b) { e.append(a, b) }), d.$element.find("input.ssi-uploadInput").trigger("beforeUpload.ssi-uploader"), j(e, i) } }; var g = function (a, b, c, d, e) { var h, f = "", g = "table.ssi-imgToUploadTable"; a.options.preview || (f = "ssi-noPreviewSubMessage", g = "tr.ssi-toUploadTr", 1 === a.currentListLength && (a.errors = e)), h = a.$element.find(".ssi-abortUpload[data-delete='" + b + "']"), h.parents(g).addClass("ssi-completed"), h.after(i(c, d, e, f)).remove() }, h = function (a) { return 0 === a.inProgress }, i = function (a, b, c, d) { return '<span class="ssi-statusLabel ' + d + " " + a + '" data-status="' + c + '">' + b + "</span>" }, j = function (a) { return a.inProgress + a.successfulUpload + a.aborted + a.abortedWithError + a.pending }, k = function (a) { var b = a.$element.find("#ssi-fileList").find("span").html(), c = b.getExtension(); a.$element.find(".ssi-uploadDetails").removeClass("ssi-uploadBoxOpened"), a.$element.find(".ssi-namePreview").html(m(b, c, 15)) }; b.prototype.abort = function (a, b, c) { "undefined" == typeof b ? (this.uploadList[a].abort(), this.totalProgress[a] = "", b = c || "Aborted", this.aborted++) : "string" != typeof b && (b = ""); var d = this.language.aborted; this.options.preview || (d = '<span class="ban7w"></span>'), g(this, a, "error", d, b), this.$element.find("#ssi-uploadProgress" + a).removeClass("ssi-hidden").addClass("ssi-canceledProgressBar"), this.toUpload[a] = void 0, this.uploadList[a] = void 0, this.imgNames[a] = void 0, this.$element.find("#ssi-clearBtn").prop("disabled", !1), this.inProgress--, h(this) && l(this) }; var l = function (a) { if (a.$element.find("#ssi-abortBtn").addClass("ssi-hidden"), !a.options.preview) { var b = "error", c = "", d = ""; a.abortedWithError > 0 ? (c = 1 === a.totalFilesLength ? a.errors : a.language.someErrorsOccurred, d = '<span class="exclamation23"></span>') : a.aborted > 0 && 0 === a.successfulUpload ? (d = '<span class="ban23"></span>', c = a.language.aborted) : a.successfulUpload > 0 && (b = "success", d = '<span class="check23"></span>', c = a.language.sucUpload), a.$element.find(".ssi-namePreview").append(i(b, d, c, "ssi-noPreviewMessage")), a.$element.find("#ssi-uploadProgressNoPreview").removeAttr("styles").addClass("ssi-hidden") } if ("function" == typeof a.options.onUpload) try { a.options.onUpload() } catch (b) { a.options.ignoreCallbackErrors || (console.log("There is an error in onUpload callback"), console.log(b)) } a.$element.find("input.ssi-uploadInput").trigger("onUpload.ssi-uploader"); var e = a.$element.find("#ssi-uploadBtn"); a.$element.find("#ssi-clearBtn").prop("disabled", !1), e.prop("disabled", !1).find("#ssi-up_loading").empty(), 0 === a.pending && (e.addClass("ssi-hidden"), a.toUpload = [], a.imgNames = [], a.totalFilesLength = 0), a.uploadList = [], a.totalProgress = [], a.currentListLength = j(a), a.inProgress = 0 }; a.fn.ssi_uploader = function (c) { var d = { url: "", data: {}, locale: "en", preview: !0, dropZone: !0, maxNumberOfFiles: "", responseValidation: !1, ignoreCallbackErrors: !1, maxFileSize: 2, ajaxOptions: {}, onUpload: function () { }, onEachUpload: function () { }, beforeUpload: function () { }, beforeEachUpload: function () { }, allowed: "", errorHandler: { method: function (a) { alert(a) }, success: "success", error: "error" } }, e = a.extend(!0, d, c); return e.allowed = e.allowed || ["jpg", "jpeg", "png", "bmp", "gif"], this.each(function () { var c = a(this); if (c.is('input[type="file"]')) { if (c.data("ssi_upload")) return; var d = new b(this, e); c.data("ssi_upload", d) } else console.log("The targeted element is not file input.") }) }, String.prototype.replaceText = function () { for (var a = Array.apply(null, arguments), b = this, c = 0; c < a.length; c++) b = b.replace("$" + (c + 1), a[c]); return b }, String.prototype.getExtension = function () { return this.split(".").pop().toLowerCase() }; var m = function (a, b, c) { "undefined" == typeof b && (b = ""), "undefined" == typeof c && (c = 10); var d = 4; if (!(c < d)) { var e = b.length, f = a.length; if (f - 2 > c) { a = a.substring(0, c); var g = a.length - e; return a = a.substring(0, g), a + "..." + b } return a } }, n = function (a) { for (var b = 0, c = 0; c < a.length; c++) "number" == typeof a[c] && (b += a[c]); return b }, o = { en: { success: "Success", sucUpload: "Successful upload", chooseFiles: "Choose files", uploadFailed: "Upload failed", serverError: "Internal server error", error: "Error", abort: "Abort", aborted: "Aborted", files: "files", upload: "Upload", clear: "Clear", drag: "Drag n Drop", sizeError: "$1 exceed the size limit of $2", extError: "$1 file types are not supported", someErrorsOccurred: "Some errors occurred!", wentWrong: "Something went wrong!", pending: "Pending", completed: "Completed", inProgress: "In progress" }, vi: { success: "Thành công", sucUpload: "Upload thành công", chooseFiles: "Chọn file", uploadFailed: "Upload thất bại", serverError: "Lỗi máy chủ", error: "Lỗi", abort: "Hủy bỏ", aborted: "Đã hủy", files: "files", upload: "Upload", clear: "Xóa", drag: "Drag n Drop", sizeError: "$1 đã vượt quá dung lượng $2 cho phép", extError: "$1 file không được hỗ trợ", someErrorsOccurred: "Một số lỗi xảy ra!", wentWrong: "Một cái gì đó đã xảy ra!", pending: "Đang duyệt", completed: "Đã hoàn thành", inProgress: "Trong tiến trình" }, gr: { success: "Επιτυχία", sucUpload: "Επιτυχής μεταφόρτωση", chooseFiles: "Επιλέξτε αρχεία", uploadFailed: "Η μεταφόρτωση απέτυχε!", serverError: "Εσωτερικό σφάλμα διακομιστή!", error: "Σφάλμα", abort: "Διακοπή", aborted: "Διακόπηκε", files: "αρχεία", upload: "Μεταφόρτωση", clear: "Εκκαθάριση", drag: "Συρετε εδώ...", sizeError: "$1 έχει ξεπεράσει το όριο των $2.", extError: "$1 αρχεία δεν υποστηρίζονται.", someErrorsOccurred: "Σημειώθηκαν ορισμένα λάθη!", wentWrong: "Κάτι πήγε στραβά!", pending: "Σε εκκρεμότητα", completed: "Ολοκληρομένα", inProgress: "Σε εξέλιξη" }, fr: { success: "Succès", sucUpload: "Envoi réussi", chooseFiles: "Choisissez fichiers", uploadFailed: "Envoi échoué", serverError: "Erreur interne du serveur", error: "Erreur", abort: "Annuler", aborted: "Annulé", files: "Fichiers", upload: "Envoyer", clear: "Effacer", drag: "Glisser déposer", sizeError: "$1 excède la taille limite de $2", extError: "Types de fichier $1 non autorisé", someErrorsOccurred: "Une erreur a eu lieu !", wentWrong: "Une erreur a eu lieu !", pending: "Εn attendant", completed: "Terminé", inProgress: "En cours" } } });